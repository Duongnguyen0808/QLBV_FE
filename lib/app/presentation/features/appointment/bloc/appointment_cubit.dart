// lib/app/presentation/features/appointment/bloc/appointment_cubit.dart

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:hospital_booking_app/app/core/di/injection_container.dart';
import 'package:hospital_booking_app/app/data/models/appointment_list_model.dart';
import 'package:hospital_booking_app/app/domain/repositories/appointment/appointment_repository.dart';
import 'package:hospital_booking_app/app/data/models/appointment_response_model.dart';

// --- State ---
abstract class AppointmentState extends Equatable {
  const AppointmentState();
  @override
  List<Object> get props => [];
}

class AppointmentInitial extends AppointmentState {}

class AppointmentLoading extends AppointmentState {}

class AppointmentLoadSuccess extends AppointmentState {
  final List<AppointmentListModel> appointments;
  const AppointmentLoadSuccess(this.appointments);
  @override
  List<Object> get props => [appointments];
}

class AppointmentLoadFailure extends AppointmentState {
  final String message;
  const AppointmentLoadFailure(this.message);
  @override
  List<Object> get props => [message];
}

// --- Cubit ---
class AppointmentCubit extends Cubit<AppointmentState> {
  final AppointmentRepository _appointmentRepo = sl<AppointmentRepository>();

  AppointmentCubit() : super(AppointmentInitial()) {
    // S·ª¨A ·ªû ƒê√ÇY: G·ªçi fetchAppointments() ngay khi Cubit ƒë∆∞·ª£c t·∫°o.
    // Repository s·∫Ω t·ª± ƒë·ªông g·ªçi ƒë√∫ng API d·ª±a tr√™n vai tr√≤ (Patient/Doctor).
    fetchAppointments();
  }

  // H√ÄM S·∫ÆP X·∫æP L·ªäCH H·∫∏N THEO TH·ª® T·ª∞ ∆ØU TI√äN (Gi·ªØ nguy√™n)
  List<AppointmentListModel> _sortAppointments(
      List<AppointmentListModel> list) {
    list.sort((a, b) {
      final isACancelled = a.status == 'CANCELLED';
      final isBCancelled = b.status == 'CANCELLED';

      // 1. Ph√¢n lo·∫°i Ho·∫°t ƒë·ªông v√† ƒê√£ H·ªßy
      if (!isACancelled && isBCancelled) {
        return -1; // A (Ho·∫°t ƒë·ªông) l√™n tr∆∞·ªõc B (ƒê√£ h·ªßy)
      }
      if (isACancelled && !isBCancelled) {
        return 1; // A (ƒê√£ h·ªßy) xu·ªëng sau B (Ho·∫°t ƒë·ªông)
      }

      // 2. N·∫øu c√πng tr·∫°ng th√°i (c√πng Ho·∫°t ƒë·ªông HO·∫∂C c√πng ƒê√£ H·ªßy), s·∫Øp x·∫øp theo th·ªùi gian
      final timeA = DateTime.parse(a.appointmentDateTime);
      final timeB = DateTime.parse(b.appointmentDateTime);

      // Ho·∫°t ƒë·ªông: S·∫Øp x·∫øp th·ªùi gian TƒÇNG d·∫ßn (g·∫ßn nh·∫•t l√™n tr√™n)
      // ƒê√£ H·ªßy: Gi·ªØ nguy√™n th·ª© t·ª± th·ªùi gian tƒÉng d·∫ßn
      return timeA.compareTo(timeB);
    });
    return list;
  }

  Future<void> fetchAppointments() async {
    // Ch·ªâ emit Loading n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i kh√¥ng ph·∫£i Loading
    if (state is! AppointmentLoading) {
      emit(AppointmentLoading());
    }

    try {
      // G·ªåI API B·ªÜNH NH√ÇN (kh√¥ng c·∫ßn ki·ªÉm tra role n·ªØa)
      print('üü¢ DEBUG AppointmentCubit: Calling fetchPatientAppointments()');
      final appointments = await _appointmentRepo.fetchPatientAppointments();

      // √ÅP D·ª§NG S·∫ÆP X·∫æP M·ªöI
      final sortedAppointments = _sortAppointments(appointments);
      print(
          '‚úÖ DEBUG AppointmentCubit: Loaded ${sortedAppointments.length} appointments');

      emit(AppointmentLoadSuccess(sortedAppointments));
    } catch (e) {
      emit(
          AppointmentLoadFailure(e.toString().replaceFirst('Exception: ', '')));
    }
  }

  // Gi·ªØ nguy√™n c√°c h√†m kh√°c (rescheduleAppointment, cancelAppointment, ...)
  Future<AppointmentResponseModel> rescheduleAppointment(
      int appointmentId, String newDateTime) async {
    try {
      final response = await _appointmentRepo.rescheduleAppointment(
          appointmentId, newDateTime);
      await fetchAppointments(); // T·∫£i l·∫°i danh s√°ch sau khi ƒë·ªïi l·ªãch
      return response;
    } catch (e) {
      // N√©m l·∫°i l·ªói ƒë·ªÉ UI c√≥ th·ªÉ x·ª≠ l√Ω
      throw Exception(e.toString().replaceFirst('Exception: ', ''));
    }
  }

  Future<void> cancelAppointment(int appointmentId) async {
    final currentState = state; // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i ph√≤ng tr∆∞·ªùng h·ª£p l·ªói
    try {
      // Kh√¥ng c·∫ßn emit loading ·ªü ƒë√¢y n·∫øu b·∫°n mu·ªën UI ph·∫£n h·ªìi nhanh h∆°n
      // ho·∫∑c b·∫°n c√≥ th·ªÉ emit loading n·∫øu mu·ªën hi·ªÉn th·ªã ch·ªâ b√°o
      // emit(AppointmentLoading());
      await _appointmentRepo.cancelAppointment(appointmentId);
      await fetchAppointments(); // T·∫£i l·∫°i danh s√°ch sau khi h·ªßy
    } catch (e) {
      String errorMessage = e.toString().replaceFirst('Exception: ', '');
      // N·∫øu c√≥ l·ªói, quay l·∫°i tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ (n·∫øu l√† Success)
      if (currentState is AppointmentLoadSuccess) {
        emit(AppointmentLoadSuccess(currentState.appointments));
      } else {
        // N·∫øu tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ kh√¥ng ph·∫£i Success, emit l·ªói
        emit(AppointmentLoadFailure(errorMessage));
      }
      // N√©m l·∫°i l·ªói ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
      throw Exception(errorMessage);
    }
  }
}
