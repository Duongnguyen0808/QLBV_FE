// lib/app/domain/repositories/appointment/appointment_repository.dart

// ignore_for_file: empty_catches, unused_catch_clause

import 'package:dio/dio.dart';
import 'package:hospital_booking_app/app/data/models/appointment_request_model.dart';
import 'package:hospital_booking_app/app/data/models/payment_models.dart';
import 'package:hospital_booking_app/app/data/models/appointment_response_model.dart';
import 'package:hospital_booking_app/app/data/models/appointment_list_model.dart';
import 'package:hospital_booking_app/app/core/di/injection_container.dart';
import 'package:hospital_booking_app/app/presentation/features/auth/bloc/auth_cubit.dart';
import 'package:hospital_booking_app/app/presentation/features/auth/bloc/auth_state.dart';

abstract class AppointmentRepository {
  // 1. T·∫°o l·ªãch h·∫πn (POST /api/appointments)
  Future<AppointmentResponseModel> createAppointment(
      AppointmentRequestModel request);

  // 2. Kh·ªüi t·∫°o thanh to√°n (POST /api/payments/create-request)
  Future<PaymentResponseModel> createPaymentRequest(
      PaymentRequestModel request);

  // 3. Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch (GET /api/payments/{id}/status)
  Future<TransactionStatusResponseModel> checkTransactionStatus(
      int transactionId);

  // 4. L·∫§Y DANH S√ÅCH L·ªäCH H·∫∏N C·ª¶A T√îI (Cho c·∫£ B·ªánh nh√¢n v√† B√°c sƒ©)
  Future<List<AppointmentListModel>> fetchMyAppointments();

  // 4B. L·∫§Y DANH S√ÅCH L·ªäCH H·∫∏N CHO B√ÅC Sƒ® (G·ªçi tr·ª±c ti·∫øp API b√°c sƒ©)
  Future<List<AppointmentListModel>> fetchDoctorAppointments();

  // 4C. L·∫§Y DANH S√ÅCH L·ªäCH H·∫∏N CHO B·ªÜNH NH√ÇN (G·ªçi tr·ª±c ti·∫øp API b·ªánh nh√¢n)
  Future<List<AppointmentListModel>> fetchPatientAppointments();

  // 5. ƒê·ªîI L·ªäCH (RESCHEDULE)
  Future<AppointmentResponseModel> rescheduleAppointment(
      int appointmentId, String newDateTime);

  // 6. M√î PH·ªéNG CALLBACK
  Future<void> simulateSuccessfulPayment(int transactionId);

  // 7. L·∫•y l·ªãch l√†m vi·ªác c√≥ s·∫µn c·ªßa b√°c sƒ© (M√¥ ph·ªèng/TBD: GET /api/doctors/available)
  Future<List<String>> fetchAvailableTimeSlots(int doctorId, String date);

  // 8. H·ªßy l·ªãch h·∫πn
  Future<void> cancelAppointment(int appointmentId);
}

class AppointmentRepositoryImpl implements AppointmentRepository {
  final Dio dio;

  AppointmentRepositoryImpl({required this.dio});

  // API 1: T·∫°o l·ªãch h·∫πn
  @override
  Future<AppointmentResponseModel> createAppointment(
      AppointmentRequestModel request) async {
    try {
      final response = await dio.post(
        '/api/appointments',
        data: request.toJson(),
      );
      return AppointmentResponseModel.fromJson(response.data);
    } on DioException catch (e) {
      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói t·∫°o l·ªãch h·∫πn kh√¥ng x√°c ƒë·ªãnh.';
      throw Exception(errorMessage);
    }
  }

  // API 2: Kh·ªüi t·∫°o thanh to√°n QR
  @override
  Future<PaymentResponseModel> createPaymentRequest(
      PaymentRequestModel request) async {
    try {
      final response = await dio.post(
        '/api/payments/create-request',
        data: request.toJson(),
      );
      final paymentResponse = PaymentResponseModel.fromJson(response.data);
      return paymentResponse;
    } on DioException catch (e) {
      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói kh·ªüi t·∫°o thanh to√°n.';
      throw Exception(errorMessage);
    }
  }

  // API 3: Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
  @override
  Future<TransactionStatusResponseModel> checkTransactionStatus(
      int transactionId) async {
    try {
      final response = await dio.get('/api/payments/$transactionId/status');
      return TransactionStatusResponseModel.fromJson(response.data);
    } on DioException catch (e) {
      throw Exception('L·ªói ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch: ${e.message}');
    }
  }

  // API 4: L·∫•y danh s√°ch l·ªãch h·∫πn (QUAN TR·ªåNG: ƒê√£ s·ª≠a logic ph√¢n bi·ªát vai tr√≤)
  @override
  Future<List<AppointmentListModel>> fetchMyAppointments() async {
    // S·ª≠a l·ªói: L·∫•y vai tr√≤ ngay l·∫≠p t·ª©c t·ª´ AuthCubit (Gi·∫£ ƒë·ªãnh n√≥ lu√¥n c√≥ d·ªØ li·ªáu sau ƒëƒÉng nh·∫≠p)
    final authCubit = sl<AuthCubit>();
    String endpoint;

    // Ph·∫£i ki·ªÉm tra tr·∫°ng th√°i ƒë√£ x√°c th·ª±c v√† l·∫•y vai tr√≤
    final authState = authCubit.state;
    bool isDoctor = false;
    if (authState is AuthAuthenticated) {
      // S·ª¨A: H·ªó tr·ª£ c·∫£ DOCTOR v√† ROLE_DOCTOR
      final role = authState.role.toUpperCase();
      isDoctor = role == 'DOCTOR' ||
          role == 'ROLE_DOCTOR' ||
          role == 'ADMIN' ||
          role == 'ROLE_ADMIN';
      print('üîç DEBUG: User role = ${authState.role}, isDoctor = $isDoctor');
    } else {
      print('‚ùå DEBUG: User is NOT authenticated! State = $authState');
    }

    // PH√ÇN BI·ªÜT API D·ª∞A TR√äN VAI TR√í
    if (isDoctor) {
      endpoint = '/api/doctors/me/appointments'; // API B√°c sƒ©
    } else {
      endpoint = '/api/appointments/me'; // API B·ªánh nh√¢n
    }

    print('üì° DEBUG: Calling API endpoint: $endpoint');

    try {
      final response = await dio.get(endpoint);
      print('‚úÖ DEBUG: API Response status = ${response.statusCode}');
      print('üì¶ DEBUG: API Response data type = ${response.data.runtimeType}');
      print('üì¶ DEBUG: API Response data = ${response.data}');

      final List<dynamic> data = response.data;
      print('üìä DEBUG: Total appointments received = ${data.length}');

      final appointments =
          data.map((json) => AppointmentListModel.fromJson(json)).toList();
      print('‚úÖ DEBUG: Successfully parsed ${appointments.length} appointments');

      return appointments;
    } on DioException catch (e) {
      print('‚ùå DEBUG: DioException occurred!');
      print('‚ùå DEBUG: Status code = ${e.response?.statusCode}');
      print('‚ùå DEBUG: Error message = ${e.response?.data}');

      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn.';
      throw Exception(errorMessage);
    } catch (e) {
      print('‚ùå DEBUG: Unexpected error = $e');
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh: $e');
    }
  }

  // API 4B: L·∫•y danh s√°ch l·ªãch h·∫πn cho B√ÅC Sƒ® (G·ªçi tr·ª±c ti·∫øp /api/doctors/me/appointments)
  @override
  Future<List<AppointmentListModel>> fetchDoctorAppointments() async {
    const endpoint = '/api/doctors/me/appointments';
    print('üîµ DEBUG fetchDoctorAppointments: Calling $endpoint');

    try {
      final response = await dio.get(endpoint);
      print('‚úÖ DEBUG fetchDoctorAppointments: Status = ${response.statusCode}');
      print(
          'üì¶ DEBUG fetchDoctorAppointments: Data length = ${(response.data as List).length}');

      final List<dynamic> data = response.data;
      final appointments =
          data.map((json) => AppointmentListModel.fromJson(json)).toList();

      return appointments;
    } on DioException catch (e) {
      print('‚ùå DEBUG fetchDoctorAppointments: Error = ${e.response?.data}');
      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn b√°c sƒ©.';
      throw Exception(errorMessage);
    }
  }

  // API 4C: L·∫•y danh s√°ch l·ªãch h·∫πn cho B·ªÜNH NH√ÇN (G·ªçi tr·ª±c ti·∫øp /api/appointments/me)
  @override
  Future<List<AppointmentListModel>> fetchPatientAppointments() async {
    const endpoint = '/api/appointments/me';
    print('üü¢ DEBUG fetchPatientAppointments: Calling $endpoint');

    try {
      final response = await dio.get(endpoint);
      print(
          '‚úÖ DEBUG fetchPatientAppointments: Status = ${response.statusCode}');
      print(
          'üì¶ DEBUG fetchPatientAppointments: Data length = ${(response.data as List).length}');

      final List<dynamic> data = response.data;
      final appointments =
          data.map((json) => AppointmentListModel.fromJson(json)).toList();

      return appointments;
    } on DioException catch (e) {
      print('‚ùå DEBUG fetchPatientAppointments: Error = ${e.response?.data}');
      String errorMessage = e.response?.data['message'] ??
          'L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn b·ªánh nh√¢n.';
      throw Exception(errorMessage);
    }
  }

  // API M·ªöI: ƒê·ªïi l·ªãch (Reschedule)
  @override
  Future<AppointmentResponseModel> rescheduleAppointment(
      int appointmentId, String newDateTime) async {
    try {
      final response = await dio.put(
        '/api/appointments/$appointmentId/reschedule',
        data: {'newAppointmentDateTime': newDateTime},
      );
      return AppointmentResponseModel.fromJson(response.data);
    } on DioException catch (e) {
      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói ƒë·ªïi l·ªãch kh√¥ng x√°c ƒë·ªãnh.';
      throw Exception(errorMessage);
    }
  }

  // ... (c√°c h√†m kh√°c gi·ªØ nguy√™n)

  @override
  Future<void> simulateSuccessfulPayment(int transactionId) async {
    try {
      await dio.get(
        '/api/payments/callback',
        queryParameters: {
          'txnId': transactionId,
          'status': 'SUCCESS',
          'transactionCode':
              'SIMULATED_${DateTime.now().millisecondsSinceEpoch}',
        },
      );
    } on DioException catch (e) {}
  }

  @override
  Future<void> cancelAppointment(int appointmentId) async {
    try {
      // G·ªçi API h·ªßy l·ªãch h·∫πn (PUT /api/appointments/{id}/cancel)
      await dio.put('/api/appointments/$appointmentId/cancel');
      // Backend s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác h·ªßy giao d·ªãch PENDING li√™n quan
    } on DioException catch (e) {
      String errorMessage =
          e.response?.data['message'] ?? 'L·ªói h·ªßy l·ªãch h·∫πn kh√¥ng x√°c ƒë·ªãnh.';
      throw Exception(errorMessage);
    }
  }

  // API 5: L·∫•y Slot Tr·ªëng (M√¥ ph·ªèng)
  @override
  Future<List<String>> fetchAvailableTimeSlots(
      int doctorId, String date) async {
    await Future.delayed(const Duration(milliseconds: 500));
    return [
      '09:00',
      '09:30',
      '10:00',
      '10:30',
      '11:00',
      '14:00',
      '14:30',
      '15:00',
      '15:30',
      '16:00',
      '16:30'
    ];
  }
}
